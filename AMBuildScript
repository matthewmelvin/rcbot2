import os, sys

def ResolveEnvPath(env, folder):
  if env in os.environ:
    path = os.environ[env]
    if os.path.isdir(path):
      return path
  else:
    head = os.getcwd()
    oldhead = None
    while head != None and head != oldhead:
      path = os.path.join(head, folder)
      if os.path.isdir(path):
        return path
      oldhead = head
      head, tail = os.path.split(head)
  return None

sdkhelpers_path = os.path.join(builder.sourcePath, 'hl2sdk-manifests', 'SdkHelpers.ambuild')
SdkHelpers = builder.Eval(sdkhelpers_path, {
    'Project': 'metamod'
})

class MMSConfig(object):
  def __init__(self):
    self.sdk_manifests = []
    self.sdks = {}
    self.sdk_targets = []
    self.binaries = []
    self.generated_headers = None
    self.mms_root = builder.options.mms_path
    self.sm_path = builder.options.sm_path or None
    self.all_targets = []
    self.target_archs = set()

    if builder.options.targets:
      target_archs = builder.options.targets.split(',')
    else:
      target_archs = ['x86']
      if builder.backend == 'amb2':
        target_archs.append('x86_64')

    for arch in target_archs:
        try:
            cxx = builder.DetectCxx(target_arch = arch)
            self.target_archs.add(cxx.target.arch)
        except Exception as e:
            # Error if archs were manually overridden.
            if builder.options.targets:
                raise
            print('Skipping target {}: {}'.format(arch, e))
            continue
        self.all_targets.append(cxx)

    if not self.all_targets:
        raise Exception('No suitable C/C++ compiler was found.')
    
  def AddVersioning(self, binary):
    binary.compiler.sourcedeps += self.generated_headers
    return binary
    
  def configure(self):
    for cxx in self.all_targets:
      if cxx.target.arch not in ['x86', 'x86_64']:
        raise Exception('Unknown target architecture: {0}'.format(arch))

      self.configure_cxx(cxx)
    
  def configure_cxx(self, cxx):
    if cxx.behavior == 'gcc':
      cxx.defines += [
        'HAVE_STDINT_H',
        'GNUC',
      ]
      cxx.cflags += [
        '-pipe',
        '-fno-strict-aliasing',
        '-Wall',
        '-Werror',
        '-Wno-uninitialized',
        '-Wno-sign-compare',
        '-Wno-unused',
        '-Wno-switch',
        '-Wno-unknown-pragmas',
        '-Wno-dangling-else',
        '-Wno-null-dereference',
        '-msse',
        '-fPIC',
        '-std=c++17',
      ]

      if (cxx.version >= 'gcc-4.0') or cxx.family == 'clang':
        cxx.cflags += ['-fvisibility=hidden']
        cxx.cxxflags += ['-fvisibility-inlines-hidden']
      cxx.cxxflags += [
        '-fexceptions',
        '-fno-rtti',
        '-fno-threadsafe-statics',
        '-Wno-non-virtual-dtor',
        '-Wno-overloaded-virtual',
        '-Wno-register',
      ]
      if (cxx.version >= 'gcc-4.7' or cxx.family == 'clang'):
        cxx.cxxflags += ['-Wno-delete-non-virtual-dtor']
      if cxx.family == 'gcc':
        cxx.cflags += ['-mfpmath=sse']
      if cxx.family == 'clang':
        cxx.cxxflags += ['-Wno-implicit-exception-spec-mismatch']
        if cxx.version >= 'clang-3.9' or cxx.version >= 'apple-clang-10.0':
          cxx.cxxflags += ['-Wno-expansion-to-defined']
        if cxx.version >= 'clang-3.6' or cxx.version >= 'apple-clang-7.0':
          cxx.cxxflags += ['-Wno-inconsistent-missing-override']
        if cxx.version >= 'apple-clang-5.1' or cxx.version >= 'clang-3.4':
          cxx.cxxflags += ['-Wno-deprecated-register']
        else:
          cxx.cxxflags += ['-Wno-deprecated']
      
      # Work around SDK warnings.
      if cxx.version >= 'clang-10.0' or cxx.version >= 'apple-clang-12.0':
        cxx.cflags += [
          '-Wno-implicit-int-float-conversion',
          '-Wno-tautological-overlap-compare',
        ]

    elif cxx.like('msvc'):
      if builder.options.debug == '1':
        cxx.cflags += ['/MTd']
        cxx.linkflags += ['/NODEFAULTLIB:libcmt']
      else:
        cxx.cflags += ['/MT']
      cxx.defines += [
        '_CRT_SECURE_NO_DEPRECATE',
        '_CRT_SECURE_NO_WARNINGS',
        '_CRT_NONSTDC_NO_DEPRECATE',
      ]
      cxx.cflags += [
        '/W3',
        '/EHsc'
      ]
      cxx.cxxflags += ['/TP', '/std:c++17']
      
      cxx.linkflags += [
        '/SUBSYSTEM:WINDOWS',
        'kernel32.lib',
        'user32.lib',
        'gdi32.lib',
        'winspool.lib',
        'comdlg32.lib',
        'advapi32.lib',
        'shell32.lib',
        'ole32.lib',
        'oleaut32.lib',
        'uuid.lib',
        'odbc32.lib',
        'odbccp32.lib',
      ]

    # Optimization
    if builder.options.opt:
      cxx.defines += ['NDEBUG']
      if cxx.behavior == 'gcc':
        cxx.cflags += ['-O3']
      elif cxx.behavior == 'msvc':
        cxx.cflags += ['/Ox', '/Zo']
        cxx.linkflags += ['/OPT:ICF', '/OPT:REF']

    # Debugging
    if builder.options.debug:
      cxx.defines += ['DEBUG', '_DEBUG']
      if cxx.behavior == 'gcc':
        cxx.cflags += ['-g3']
      elif cxx.behavior == 'msvc':
        cxx.cflags += ['/Od', '/RTC1']

    # Don't omit the frame pointer.
    # This needs to be after our optimization flags which could otherwise disable it.
    if cxx.behavior == 'gcc':
      cxx.cflags += ['-fno-omit-frame-pointer']
    elif cxx.behavior == 'msvc':
      cxx.cflags += ['/Oy-']

    # Platform-specifics
    if cxx.target.platform == 'linux':
      cxx.defines += ['LINUX', '_LINUX', 'POSIX', '_FILE_OFFSET_BITS=64']
      if cxx.family == 'gcc':
        cxx.linkflags += ['-static-libgcc']
      elif cxx.family == 'clang':
        cxx.linkflags += ['-lgcc_eh']
      cxx.linkflags += ['-static-libstdc++']
    elif cxx.target.platform == 'mac':
      cxx.defines += ['OSX', '_OSX', 'POSIX']

      if cxx.version >= 'apple-clang-10.0':
        cxx.cflags += ['-mmacosx-version-min=10.9', '-stdlib=libc++']
        cxx.linkflags += [
          '-mmacosx-version-min=10.9',
        ]
      else:
        cxx.cflags += ['-mmacosx-version-min=10.5']
        cxx.linkflags += [
          '-mmacosx-version-min=10.5',
        ]

      cxx.linkflags += [
        '-stdlib=libc++',
        '-lc++',
      ]
      cxx.cxxflags += ['-stdlib=libc++']
    elif cxx.target.platform == 'windows':
      cxx.defines += ['WIN32', '_WINDOWS']
    
  def findSdkPath(self, sdk_name):
    dir_name = 'hl2sdk-{}'.format(sdk_name)
    if builder.options.hl2sdk_root:
      sdk_path = os.path.join(builder.options.hl2sdk_root, dir_name)
      if os.path.exists(sdk_path):
        return sdk_path
    return ResolveEnvPath('HL2SDK{}'.format(sdk_name.upper()), dir_name)

  def shouldIncludeSdk(self, sdk):
    if sdk.get('source2', False):
      return False
    return True

  def detectSDKs(self):
    sdk_list = builder.options.sdks.split(',')
    SdkHelpers.sdk_filter = self.shouldIncludeSdk
    SdkHelpers.find_sdk_path = self.findSdkPath
    SdkHelpers.findSdks(builder, self.all_targets, sdk_list)

    self.sdks = SdkHelpers.sdks
    self.sdk_manifests = SdkHelpers.sdk_manifests
    self.sdk_targets = SdkHelpers.sdk_targets
    
  def Library(self, cxx, name):
    binary = cxx.Library(name)
    return binary
    
  def StaticLibrary(self, cxx, name):
    return cxx.StaticLibrary(name)

  def HL2Library(self, context, compiler, name, sdk):
    binary = self.Library(compiler, name)
    self.AddVersioning(binary)
    cxx = binary.compiler

    cxx.cxxincludes += [
      os.path.join(context.currentSourcePath),
      os.path.join(context.currentSourcePath, 'sourcehook'),
      os.path.join(context.sourcePath, 'loader'),
      os.path.join(self.mms_root, 'core'),
      os.path.join(self.mms_root, 'core', 'sourcehook'),
    ]

    for other_sdk in self.sdk_manifests:
      cxx.defines += ['SE_{}={}'.format(other_sdk['define'], other_sdk['code'])]

    SdkHelpers.configureCxx(context, binary, sdk)

    return binary

if builder.options.breakpadupload == '1' and not 'BREAKPAD_SYMBOL_SERVER' in os.environ:
  raise Exception("--breakpad-upload passed to configure.py but environment variable 'BREAKPAD_SYMBOL_SERVER' isn't set!")

if builder.options.breakpadupload == '1' and not builder.options.sm_path:
  raise Exception("--breakpad-upload requires SourceMod path to be set!")

MMS = MMSConfig()
MMS.detectSDKs()
MMS.configure()

MMS.generated_headers = builder.Build('versioning/AMBuildScript', { 'MMS': MMS })

# This will clone the list and each cxx object as we recurse, preventing child
# scripts from messing up global state.
builder.targets = builder.CloneableList(MMS.all_targets)

BuildScripts = [
  'AMBuilder',
  'loader/AMBuilder'
] # add sub-modules here
if getattr(builder.options, 'enable_tests', False):
    BuildScripts += [] # add tests here

import os

if builder.backend == 'amb2':
  BuildScripts += [
    'PackageScript',
  ]

if builder.options.breakpadupload == '1':
  BuildScripts += ['BreakpadSymbols']

builder.Build(BuildScripts, { 'MMS': MMS })
